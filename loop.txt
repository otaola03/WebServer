
void	WebServer::serverLoop()
{
	char msg[] = "HTTP/1.1 200 OK\nContent-Type: text/plain\nContent-Length: 12\n\nHello world!";
	struct kevent evList[MAX_EVENTS];
	int numEvents;
	struct kevent auxEvSet;
	int	fd;

	struct timeval timeout;
    timeout.tv_sec = 5;
    timeout.tv_usec = 0;

    while (1) 
	{
		numEvents = kevent(kq, NULL, 0, evList, 1, NULL);
		for (int i = 0; i < numEvents; i++)
		{
			fd = evList[i].ident;

			// NEW CLIENT
			if (isAPort(fd))
			{
				int newfd = ports[fd]->acceptConnection();;
				if (newfd == -1 || newfd < 0)
					return ;

				int yes;
				if (setsockopt(newfd, SOL_SOCKET, SO_REUSEADDR, &yes, sizeof(int)) == -1)
				{
					perror("setsockopt");
					exit(1);
				}
				fcntl(newfd, F_SETFL, O_NONBLOCK);
				EV_SET(&auxEvSet, newfd, EVFILT_READ, EV_ADD, 0, 0, NULL);
                kevent(kq, &auxEvSet, 1, NULL, 0, NULL);
				//acceptNewClient(fd);
			}

			// DISCONNECT
			else if (evList[i].flags & EV_EOF)
			{
				/* clients[fd]->closeSockFd(kq); */
				/* delete clients[fd]; */
				EV_SET(&auxEvSet, fd, EVFILT_READ, EV_DELETE, 0, 0, NULL);
                kevent(kq, &auxEvSet, 1, NULL, 0, NULL);
				close(fd);
			}

			// RECIVE DATA
			else if (evList[i].filter == EVFILT_READ)
			{
				std::cout << "RECIVE\n";
				int numbytes;
				char buf[1000];
				if ((numbytes = recv(fd, buf, sizeof(buf), 0)) <= 0)
				{
					if (numbytes == 0)
						std::cout << RED << "selectserver: socket "<< fd << " hung up\n" << WHITE;
					if (numbytes == -1)
					{
 						perror("recv");
 						exit(1);
					}
					if (numbytes == EWOULDBLOCK)
						std::cout << "HHHHHHHHHHHHHHHHHHHHHHHHHHHHH\n\n\n";
				}
				EV_SET(&evList[i], fd, EVFILT_WRITE, EV_ENABLE, 0, 0, NULL);
				kevent(kq, &evList[i], 1, NULL, 0, NULL);

				/* clients[fd]->closeSockFd(kq); */
				/* delete clients[fd]; */
			}
			else if (evList[i].filter == EVFILT_WRITE)
			{
				std::cout << "WRITEEEEE\n";
				if (send(fd, msg, sizeof(msg), 0) == -1)
					perror("send");
				EV_SET(&evList[i], fd, EVFILT_WRITE, EV_ENABLE, 0, 0, NULL);
				kevent(kq, &evList[i], 1, NULL, 0, NULL);



				EV_SET(&auxEvSet, fd, EVFILT_READ, EV_DELETE, 0, 0, NULL);
                kevent(kq, &auxEvSet, 1, NULL, 0, NULL);
				close(fd);
			}
		}
	}
}



WebServer& WebServer::operator=(const WebServer& toAssign)
{
	(void)toAssign;
	return *this;
}

